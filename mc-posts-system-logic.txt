mc-posts-system-logic.txt

=======================
系统模块结构
=======================

一、核心功能模块 (app.js)
├─ 帖子加载与显示
│  ├─ loadPosts() - 加载并渲染帖子列表
│  ├─ displayPosts() - 显示过滤后的帖子
│  └─ getStoredPosts() - 从localStorage获取帖子数据
│
├─ 数据持久化
│  ├─ savePost() - 保存新帖子
│  └─ 自动生成序列号机制
│
├─ 筛选系统
│  ├─ filterPosts() - 综合筛选逻辑
│  ├─ 多条件筛选支持：
│  │  ├─ 玩法类型
│  │  ├─ 游戏版本
│  │  ├─ 加载器类型
│  │  ├─ 时间范围
│  │  └─ 举报状态(管理员)
│  └─ 时间筛选子系统
│     ├─ setTimeFilter() - 快速时间筛选
│     ├─ applyCustomTimeFilter() - 自定义时间范围
│     └─ clearTimeFilter() - 清除时间筛选

二、用户交互模块
├─ 表单系统
│  ├─ 动态表单处理：
│  │  ├─ 版本选择(支持自定义)
│  │  ├─ 联机方式扩展
│  │  └─ 留存时间设置
│  ├─ 表单验证
│  └─ 数据格式化
│
├─ 帖子操作
│  ├─ 查看详情
│  ├─ 举报功能
│  └─ 删除/恢复(管理员)
│
└─ 复选框系统
   ├─ 智能全选功能
   ├─ 分组状态管理
   └─ 自动状态同步

三、管理员系统
├─ 权限验证
│  ├─ 密码加密存储
│  ├─ 会话管理
│  └─ 自动跳转保护
│
├─ 特殊功能
│  ├─ 举报内容管理
│  └─ 密码重置
│
└─ 数据看板
   ├─ 完整数据展示
   └─ 状态标记系统

四、样式系统 (style.css)
├─ 响应式布局体系
│  ├─ 移动端适配
│  ├─ 平板适配
│  └─ 桌面端优化
│
├─ 组件化样式
│  ├─ 帖子卡片
│  ├─ 筛选面板
│  └─ 表单元素
│
└─ 状态可视化
   ├─ 按钮交互状态
   ├─ 举报标记
   └─ 时间筛选激活指示

=======================
核心数据流
=======================
1. 数据存储：
   localStorage -> mcPosts (JSON格式)
   ├─ posts数组结构
   │  ├─ id: 时间戳
   │  ├─ 内容字段(标题/内容/版本等)
   │  └─ 系统字段(举报状态/序列号等)
   └─ 自动序列号管理

2. 帖子生命周期：
   创建 -> 验证 -> 存储 -> 展示 -> 筛选 -> 操作(举报/删除)

3. 筛选流程：
   用户输入 -> 组合筛选条件 -> 实时过滤 -> 渲染更新

=======================
关键设计模式
=======================
1. 模块化架构
2. 观察者模式 (事件监听)
3. 策略模式 (筛选条件组合)
4. 工厂模式 (帖子对象创建)
5. 状态模式 (管理员权限管理)

=======================
安全机制
=======================
1. 管理员密码：
   ├─ AES加密存储
   ├─ 会话级验证
   └─ 密码强度强制

2. 内容安全：
   ├─ 举报隔离机制
   └─ 敏感内容过滤(预留接口)

=======================
扩展点说明
=======================
1. 新增筛选条件：
   - 在filterPosts()添加条件判断
   - 更新HTML模板

2. 添加管理功能：
   - 通过admin.html扩展
   - 使用管理员验证中间件

3. 样式定制：
   - 通过CSS变量系统
   - 修改主题色(#1a73e8)

4. 数据导出：
   - 通过getStoredPosts()扩展

[区块链集成]
- 使用Substrate框架构建自定义链
- 创建专用Pallet处理帖子存储
- 交易流程：
  1. 用户提交内容
  2. 前端生成交易
  3. 用户签名交易
  4. 交易广播到区块链网络
  5. 出块确认（通常等待6个区块确认）
- 数据查询：
  使用链上存储查询接口直接获取最新状态